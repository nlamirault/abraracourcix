// Code generated by protoc-gen-go. DO NOT EDIT.
// source: health.proto

/*
Package health is a generated protocol buffer package.

It is generated from these files:
	health.proto

It has these top-level messages:
	ServiceStatus
	StatusRequest
	StatusResponse
*/
package health

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceStatus struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Text   string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (m *ServiceStatus) Reset()                    { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()               {}
func (*ServiceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ServiceStatus) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatusResponse struct {
	Services []*ServiceStatus `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusResponse) GetServices() []*ServiceStatus {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceStatus)(nil), "health.ServiceStatus")
	proto.RegisterType((*StatusRequest)(nil), "health.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "health.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HealthService service

type HealthServiceClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type healthServiceClient struct {
	cc *grpc.ClientConn
}

func NewHealthServiceClient(cc *grpc.ClientConn) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/health.HealthService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HealthService service

type HealthServiceServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterHealthServiceServer(s *grpc.Server, srv HealthServiceServer) {
	s.RegisterService(&_HealthService_serviceDesc, srv)
}

func _HealthService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/health.HealthService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "health.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _HealthService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health.proto",
}

func init() { proto.RegisterFile("health.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x48, 0x4d, 0xcc,
	0x29, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0x64, 0xd2, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b,
	0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xaa, 0x94, 0xfc, 0xb9, 0x78, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93,
	0x53, 0x83, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x31, 0x2e, 0xb6, 0x62, 0xb0, 0xac, 0x04,
	0x13, 0x58, 0x14, 0xca, 0x03, 0xa9, 0x2d, 0x49, 0xad, 0x28, 0x91, 0x60, 0x86, 0xa8, 0x05, 0xb1,
	0x95, 0xf8, 0xb9, 0x78, 0x21, 0x26, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0x39, 0x73,
	0xf1, 0xc1, 0x04, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x0c, 0xb9, 0x38, 0x8a, 0x21, 0x76,
	0x16, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0x89, 0xea, 0x41, 0x9d, 0x8e, 0xe2, 0x96, 0x20,
	0xb8, 0x32, 0xa3, 0x48, 0x2e, 0x5e, 0x0f, 0xb0, 0x0a, 0xa8, 0x02, 0x21, 0x0f, 0x2e, 0x36, 0xa8,
	0x83, 0x11, 0x7a, 0x91, 0xad, 0x95, 0x12, 0x43, 0x17, 0x86, 0x58, 0xae, 0xc4, 0xdf, 0x74, 0xf9,
	0xc9, 0x64, 0x26, 0x4e, 0x21, 0x76, 0x7d, 0x88, 0x7c, 0x12, 0x1b, 0x38, 0x20, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xe0, 0xfd, 0xe4, 0x41, 0x3e, 0x01, 0x00, 0x00,
}
