// Code generated by go-bindata.
// sources:
// ../../ChangeLog.md
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ChangelogMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\xd1\x6e\xdb\x20\x14\x86\xef\xfd\x14\x47\xea\x4d\x6b\x69\x31\x78\xa9\xd7\x4d\xda\x45\x9a\x6e\x53\xa4\x54\x9a\x3a\x75\xda\x65\x08\x3e\x25\xa8\x84\x63\x01\xae\x94\xb7\x1f\xd0\x64\x31\x5d\x73\xc7\x21\x1f\xdf\xff\x83\x97\x3b\x61\x15\xae\x49\x55\x5f\x8b\x5f\x55\x5d\xc0\x6f\x74\x5e\x93\x05\x3e\x63\x33\x06\x97\x6c\xde\xb4\x5d\xd3\x32\xde\x5d\x55\xd5\x07\xd8\x6c\xbe\xaf\xfe\x6c\x36\xb0\xd4\x4e\x1a\x5c\xae\x60\x3b\x6a\xd3\xc7\x8d\x7b\xad\x9c\x08\xda\x2a\x08\x04\xdf\xe4\x8e\xa0\x9d\xb1\x38\x7f\x1c\x7a\x11\x10\x16\x3f\x57\xd0\x93\x1c\xf7\x68\x43\xfc\x1b\xd9\xb7\xc8\x0f\x8a\xc6\x6e\x1a\x80\xcd\x6e\x72\x80\xb6\x69\xdb\x73\x80\xe3\x79\x72\x87\xf2\x39\xa1\xe8\x1c\x39\x0f\xa3\x4f\x8b\x3a\xae\xf2\x4e\x5d\x1c\xff\xe4\x68\x0f\xb5\xda\xd6\x49\x54\x2b\xa3\x7b\xac\x4b\xd3\xa7\x6c\xe2\x0d\x9f\xff\x5f\xf5\x4e\xfb\xc1\x88\x03\x88\x61\x30\x5a\xe6\xf0\xf0\xf2\x4a\x9e\xf3\x28\x32\xf1\x4a\xc1\x87\x83\xc1\xf7\xae\x49\x92\x7d\xd2\x6a\x74\xaf\xdd\x0b\x77\x97\xdc\x9c\x35\x3c\xb7\xbc\xce\xee\x5f\x18\xc6\x21\x41\x31\xff\x48\xa3\x07\x6d\x03\xaa\xf7\xe8\xeb\x9c\xfc\x73\xc3\xbb\x33\xbd\xb2\x3a\xe4\x1b\x5f\x58\x61\x0e\x41\x4b\x5f\x32\xf3\x13\x33\x3f\x33\x8b\xbe\x87\x7b\xb2\x8a\xee\x6e\x61\x2b\xe4\x33\xda\xf4\xaa\x17\xfc\x4b\xde\x11\x63\xd8\xc5\x97\x3b\xd5\xbf\xdc\x0a\xaf\xe5\x9b\xe9\x55\x29\xf9\x78\x92\xf0\x52\xf2\x80\xbd\xf6\xff\x14\x05\xd2\x9e\x10\x36\xe9\xb2\x1f\x0c\xa6\xaf\xc6\x67\xd2\xa1\x0c\x25\xc4\x8f\x10\xbb\x99\x78\x62\xf7\xf8\xd4\x3e\x90\x43\x10\xb6\x07\x87\xc1\x69\x7c\x41\x78\x7c\x58\x1f\x73\xac\xe3\xd2\x14\x65\xd3\xf4\x96\x4c\x98\x0c\xff\x06\x00\x00\xff\xff\xf8\xd1\x68\xc5\x29\x03\x00\x00")

func ChangelogMdBytes() ([]byte, error) {
	return bindataRead(
		_ChangelogMd,
		"../../ChangeLog.md",
	)
}

func ChangelogMd() (*asset, error) {
	bytes, err := ChangelogMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../ChangeLog.md", size: 809, mode: os.FileMode(420), modTime: time.Unix(1461677137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../ChangeLog.md": ChangelogMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"ChangeLog.md": &bintree{ChangelogMd, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

